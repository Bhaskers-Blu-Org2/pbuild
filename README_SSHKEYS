SSH (on UNIX) supports login via public/private key.  The idea here is that
you never get prompted for username or password again.  It works from putty
on Windows as well, along with SecureCRT.  Very, very useful.  Also, PBUILD
requires use of public/private keys to work properly.  This mechanism only
works if you use a non-shared account.  I DO NOT recommend that you set this
up on some shared account (i.e. root).

All of the cross-platform development folks use this.

To create a public/private key:

1.  Use ssh-keygen.  Do this from your “primary” UNIX machine (where you do
    most of your development).  This will be something like:
        ssh-keygen -t dsa -b 2048 -C "Microsoft-internal"
        Generating public/private dsa key pair.
        Enter file in which to save the key (/home/jeffcof/.ssh/id_dsa): 
        Enter passphrase (empty for no passphrase): 
        Enter same passphrase again: 
        Your identification has been saved in /home/jeffcof/.ssh/id_dsa.
        Your public key has been saved in /home/jeffcof/.ssh/id_dsa.pub.
        The key fingerprint is:
        68:8e:50:3c:8d:cc:fa:77:2b:ad:cc:88:d6:5f:2f:4a Microsoft-internal

2.  The important part with the above: Don’t enter any passphrase.  If you
    do, then you’ll need to use ssh-agent to cache that, or you’ll need to
    type the passphrase many, many times.  I absolutely use a passphrase if
    connecting remotely and SSH is passed through the firewall (i.e. when
    connecting from work to home, that has a passphrase).  But that’s not
    the case here.

3.  This will create two files in your .ssh directory: id_dsa and id_dsa.pub

4.  Create a link for authorized keys (basically, this is the list of keys
    that can be remotely used to log in):
    a.  Create a link from id_dsa.pub with a command like:
        (cd ~/.ssh; ln -s id_dsa.pub authorized_keys)
    b.  Tar up your .ssh directory: tar –cf ssh.tar .ssh
    c.  Copy the ssh.tar file to each of your remote systems and untar it.
    d.  Be sure that the .ssh directory has a permission of 600 or things won’t
        work!

5. That should be it.

So, to summarize: Create the public/private key.  Copy the key files to each
of your remote systems.  On each remote system, .ssh/id_dsa.pub should exist,
.ssh/id_dsa (the private key) should exist, and authorized_keys should exist
and should be a link to .ssh/id_dsa.pub.

This gets you the ability to SSH and SCP from Linux/Unix system to Linux/Unix
system without password prompts.  You can use this same public/private key,
if you wish, to avoid password prompts when SSHing from Windows to UNIX as well.
I do that as well.  Same key files work fine.  To do this from putty, use the
‘puttygen’ program to import your key into putty.

As an aside: I have some easy BASH functions to distribute the latest/greatest
.bash_profile file (and any other files you’d like) to a list of remote systems.
This lets you maintain the same environment everywhere.  If you’d like to see
how I do this, look at my .bash_profile file on any system where I have an
account (any UNIX Dev system for the OSTC X-Plat team).

Let me know if you have any questions or problems.

/Jeff
