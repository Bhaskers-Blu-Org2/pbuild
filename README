What is pbuild?

pbuild (private build) a complement to devbuild, but I anticipate that it
will be more powerful and certainly more useful for us.

pbuild will allow you to do a build across all our platforms using your
own workspaces.  So, since you’re using your own workspaces, if you have
a problem on a host, you simply need to go to the workspace and everything
is left intact in that workspace to work on resolving the problem.  It
supports fetching a shelveset if you ask it to, doing a ‘tf get’ (get
latest sources prior to fetching shelveset) if you ask for it, doing a
‘make clean’ if you ask for it, and a target of your choice (default target
is 'testrun').  There are other options as well.  pbuild supports running
on any or all of your development hosts.

pbuild is driven by an initialization file to define the hosts to use.  A
sample configuration file can be found in the same location as pbuild itself,
and should contain config_sample with either config_hosts_{core,interop}
appended to that, depending on the group you are in.  The configuration file
is normally stored in ~/.pbuild, but this can be customized via environment
variable PBUILD.

pbuild, by default, stores log files from the builds in your home directory
(~/).  This can be customized via the configuration file.  See the sample
configuration file for details.

pbuild fully supports terminating the builds via ^C.  Upon termination,
pbuild will kill all child processes, causing remote build operations to
terminate.

To run pbuild, you can do "python ./test/util/pbuild/pbuild.py".  There
is a helper script in ./build/python to do the same thing.  So, if you
are in the build directory, just do "./pbuild" with any command line
options.


While running, pbuild will show status like this:

Tag                           Host Name                     Status

aix_5.3                       scxaix1                       Done (18:55)
aix_6.1                       scxaix3-3                     Done (23:30)
hp_v2_ia64                    scxhpi10                      Done (21:45)
hp_v2_risc                    scxhpr3                       Done (24:55)
hp_v3_ia64                    scxhpi1
hp_v3_risc                    scxhpr2                       Done (27:00)
mac_10.5                      scx-mac04                     Done (07:15)
redhat_4_x86                  scxrhel4-01                   Done (23:50)
redhat_5_x86                  scxcore-rhel50-01             Done (11:55)
sun_5.10_sparc                scxsun12                      Done (24:40)
sun_5.10_x86                  scxcore-solx86-01             Done (23:50)
sun_5.8_sparc                 scxsun03-s8
sun_5.9_sparc                 scxsun14                      Done (24:30)
suse_10_x86                   scxcore-suse01                Done (12:35)
suse_9_x86                    scxsles9-01

Elapsed Time:  27:45


In this example, hosts scxhpi1, scxsun03-s8, and scxsles9-01 are still
building.  All other hosts have completed (with time to complete).  If
a build fails, status is "Failed" (bolded).


Assumptions:

1) For simplicity, pbuild assumes that you're using certificates everywhere.
   This means that you can type "ssh <hostname>" from one Unix/Linux host to
   go directly to some other Unix/Linux host without username/password
   prompts. Setting up certificates for this is beyond the scope of this
   document, but send me (Jeff Coffler) a message, and I'll be happy to show
   you how to set that up.

   pbuild, when starting, will verify that all required SSH keys are stored
   in your ~/.ssh/known_hosts file.  If you have modified your configuration
   file, pbuild will run this verification step again to double check that
   all your hosts can be reached.  This can be forced with --initialize.

2) pbuild assumes that you're using 'bash' as your shell.  If important,
   it can be changed to support other shells.  But to date it has no such
   support.


Command Qualifiers to pbuild (see 'pbuild --help' for latest/greatest):

Usage: pbuild.py [option-list] [host-list]   (use --help or -h for help)

pbuild will allow you to do a build across all platforms using your own
workspaces. If a build problem occurs, all files are left completely intact,
simplifying the steps you must perform to replicate the problem. pbuild
supports a wide variety of options, specified below.  For more information,
view the README file checked in with pbuild.

Options:
  -h, --help            show this help message and exit
  --abortOnError        Immediately aborts when the first remote build fails
                        (for future - do not use yet)
  --attributes=TEST_ATTRS
                        Specifies the unit test attributes that you wish to
                        use to restrict unit tests
  --branch=BRANCH       Branch specification to build (only build hosts with
                        this branch specification)
  --cache=CACHE         Specifies 'make cache' settings to be specified on the
                        build host (if not specified, 'make cache' settings
                        are unchanged on the destination host)
  --command=COMMAND     Executes the specified command string rather than
                        buiding/running a command script to perform a remote
                        build
  --exclude=EXCLUDE     Overrides default exclude list from configuration file
                        (if any); comma-separated list of hosts to exclude
                        from the build
  -f, --full            Perform a full build (does --cache=NOUNIT
                        --target='all testrun')
  --initialize          Verify public keys in known_hosts file
  -l, --list            List host configuration information and exit
  --logdir=LOGDIR       Overrides 'logdir' from configuration file
  --logdir_prior=LOGDIR_PRIOR
                        Overrides 'logdir_prior' from configuration file
  --nocleanup           Skip the 'tf undo' cleanup at the end of a build
  --nocurses            Disable curses for dynamic screen updating (may be
                        useful for diagnostic purposes)
  --settings=SETTINGS   Overrides default settings from program and
                        configuration file (i.e. 'ShowSummary,LogFile')
  -s SHELVESET, --shelveset=SHELVESET
                        Specifies the shelveset name to unshelve prior to the
                        build; may be a comma-separated list
  -t TARGET, --target=TARGET
                        Specifies the build target to use for the 'make'
                        command (default: 'testrun').  Set target as empty
                        string to avoid the 'make' step (useful to, say, undo
                        changes on a host)
  --tests=TESTS         Specifies the subset of unit tests that you wish to
                        run (if the target includes "testrun"); may be a
                        comma-separated list


Environment variables that modify and control PBUILD behavior:

PBUILD:			Path where the PBUILD configuraiton file can be found.
			By default, this is ~/.pbuild unless the PBUILD
			environment variable is set.


Settings that modify behavior:

Settings are set to "reasonable defaults for most people" automatically.  By
that, I mean that settings are the most logical and trouble-free settings, but
not necessarily the "nicest" settings.

Settings can be overridden by the configuration file, or by the command line
qualifier "--settings".  A setting can be prefixed by "no" to disable it; if
it is not prefixed by "no", then the setting is enabled.

Settings that can be controlled:

DeleteLogfiles: Prior to starting a build, delete all variations of log files
		that will be written for that build.  This is useful to avoid
		clutter when using "LogfileRename" (described below).

DiagnoseErrors	Leaves temporary build script intact on destination system in
		case of internal problems with pbuild.

LogfileBranch:	This option will choose a name for the logfile that includes
		the branch that is being used for the build.  This allows
		multiple instances of PBUILD to be run concurrently against
		different branches.

LogfileRename:	After a build, the log files are renamed to indicate if the
		final build status was successful or unsuccessful.

Progress:	Display progress updates for the build.  This results in a lot
		of screen updates during the build, and is thus a setting that
		can be disabled.

SummaryScreen:	Show a summary screen at the end of a build.  This appears to
		be needed for putty users (for some reason, curses clears the
		screen when you're using putty).

		Nice to disable if you can (cleaner screen output).

TFProxStart:	Automatically try and start the TFS Proxy Server (tfprox) in
		case it's not running.  Note: This feature requires "sudo"
		access (with no password prompt).  If you don't have "sudo"
		privileges, then you'll need to disable this option.

Default settings are:
	"DeleteLogfiles,NoDiagnoseErrors,NoLogfileRename,Progress,SummaryScreen,TFProxStart"


Output description for "Progress" setting:

If you run pbuild with the "Progress" setting (the default), then pbuild will
display a line under "status" like:

  - <operation> <lines>

For example, you may see a line like:

  - make pegasus (619)

This means that the build is currently executing the "make pegasus" step, and
that 619 lines of log text have been received since the "make pegasus" step was
started.

Note that if the first byte is a "?" rather than a "-", as in:

  ? make pegasus (619)

this means that no log text has been received for 31 seconds or more (in other
words, the host does not appear to be responding).  Once the host performs
additional work, the "?" will change back to a "-".


Support for 'make cache':

For the --cache qualifier (to support the 'make cache' facility), the following
settings may be specified.  For ease of data entry, case is not significant.
If you wish to specify multiple entries for 'make cache', you may separate
entries with commas or spaces (if spaces, be sure to quote the result!):

  BUILD_TYPE		(allowed values: Debug, Release) 
  BUILD_PROFILING	(allowed values: false, prof, gprof, quantify)
  BUILD_PEGASUS		(allowed values: true, false)
  BUILD_PEGASUS_DEBUG	(allowed values: true, false)

In addition to the above, some special "keywords" will be allowed which have no
value.  These perform shortcut substiutions, and are:

  SCXONLY	Does: "BUILD_PEGASUS=false"
  ALL		Does: "BUILD_PEGASUS=true"
  RESET		Does: "BUILD_TYPE=Release BUILD_PROFILING=false
  		        BUILD_PEGASUS=true BUILD_PEGASUS_DEBUG=false
			UNITTESTS_SUBSET="
		(Effectively does a full reset with default cache settings)
  DEBUG		Does: "BUILD_TYPE=Debug BUILD_PEGASUS_DEBUG=true"
  RELEASE	Does: "BUILD_TYPE=Release BUILD_PEGASUS_DEBUG=false"
  NOUNITTESTS	Does: "UNITTEESTS_SUBSET="

Special keywords can be chained.  Like: "RESET,DEBUG,BUILD_PEGASUS=false".

Additionally, any of these keywords (or values) can be abbreviated.  So, for
example, --cache="N build_t=d" will do a "UNITTESTS_SUBSET= BUILD_TYPE=Debug".

If one keyword is a subset of another, then you may not abbreviate it.  Thus,
due to BUILD_PEGASUS/BUILD_PEGASUS_DEBUG, you can't abbreviate "BUILD_PEGASUS"
but you can abbreviate BUILD_PEGASUS_DEBUG.  Thus,
    --cache="buILD_PegaSUS=t BUILD_PEGASUS_=f"
will result in:
     "BUILD_PEGASUS=true BUILD_PEGASUS_DEBUG=false".


Support for testrun attributes and names:

Qualifier -attributes can be used to only run certain tests with attributes set
in the test source files.  Prepend a "-" to include the opposite setting.

Today, only attribute "SLOW" is defined in tests, and is defined to be any test
that takes "a while" to run.

For example:
  -attributes=-SLOW
    will only run tests that are not marked as "slow" tests

Qualifer -tests can be used to restrict tests that are run, or to ignore tests
that are run.  Prepend a "-" to a test name to ignore a certain test.

For example:
  -tests=-atomic
    will run all tests except those with "atomic" in their name
  -tests=atomic,condition
    will only run tests with "atomic" or "condition" in their names

Configuration tag "test_attributes" will form default attribute specification.
Configuration tag "test_list" will form the default unit test specification.


Keyboard Input:

Once every poll interval the keyboard is polled for input.  The following
characters are recognized:

	"r":	Redraw Screen	Useful if an SSH error corrupts your screen
				(if a host is down, for example).

	"^C":	Abort		There's actually no special handling for this
				since none is needed.  Causes pbuild to abort
				processing, cleaning up all remote processes
				and aborting the build across all systems.



Features to be added:

1. Jonas asks for a mechanism to have pbuild shelve automatically and then
run on remote hosts.

2. From Andreas: Default list of qualifiers to include (or override from
command line).  Investigate if aliases will fit most of the bill for this.
